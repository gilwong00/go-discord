// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file proto/v1/member/member.proto (package proto.member.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum proto.member.v1.MemberRole
 */
export enum MemberRole {
  /**
   * @generated from enum value: MemberRole_UNKNOWN = 0;
   */
  MemberRole_UNKNOWN = 0,

  /**
   * @generated from enum value: MemberRole_ADMIN = 1;
   */
  MemberRole_ADMIN = 1,

  /**
   * @generated from enum value: MemberRole_GUEST = 2;
   */
  MemberRole_GUEST = 2,

  /**
   * @generated from enum value: MemberRole_MODERATOR = 3;
   */
  MemberRole_MODERATOR = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(MemberRole)
proto3.util.setEnumType(MemberRole, "proto.member.v1.MemberRole", [
  { no: 0, name: "MemberRole_UNKNOWN" },
  { no: 1, name: "MemberRole_ADMIN" },
  { no: 2, name: "MemberRole_GUEST" },
  { no: 3, name: "MemberRole_MODERATOR" },
]);

/**
 * @generated from message proto.member.v1.Member
 */
export class Member extends Message<Member> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: proto.member.v1.MemberRole role = 2;
   */
  role = MemberRole.MemberRole_UNKNOWN;

  /**
   * @generated from field: string user_id = 3;
   */
  userId = "";

  /**
   * @generated from field: string server_id = 4;
   */
  serverId = "";

  constructor(data?: PartialMessage<Member>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.member.v1.Member";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "role", kind: "enum", T: proto3.getEnumType(MemberRole) },
    { no: 3, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "server_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Member {
    return new Member().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Member {
    return new Member().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Member {
    return new Member().fromJsonString(jsonString, options);
  }

  static equals(a: Member | PlainMessage<Member> | undefined, b: Member | PlainMessage<Member> | undefined): boolean {
    return proto3.util.equals(Member, a, b);
  }
}

/**
 * @generated from message proto.member.v1.CreateServerMemberRequest
 */
export class CreateServerMemberRequest extends Message<CreateServerMemberRequest> {
  /**
   * @generated from field: proto.member.v1.MemberRole role = 1;
   */
  role = MemberRole.MemberRole_UNKNOWN;

  /**
   * @generated from field: string user_id = 2;
   */
  userId = "";

  /**
   * @generated from field: string server_id = 3;
   */
  serverId = "";

  constructor(data?: PartialMessage<CreateServerMemberRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.member.v1.CreateServerMemberRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "role", kind: "enum", T: proto3.getEnumType(MemberRole) },
    { no: 2, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "server_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateServerMemberRequest {
    return new CreateServerMemberRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateServerMemberRequest {
    return new CreateServerMemberRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateServerMemberRequest {
    return new CreateServerMemberRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateServerMemberRequest | PlainMessage<CreateServerMemberRequest> | undefined, b: CreateServerMemberRequest | PlainMessage<CreateServerMemberRequest> | undefined): boolean {
    return proto3.util.equals(CreateServerMemberRequest, a, b);
  }
}

/**
 * @generated from message proto.member.v1.CreateServerMemberResponse
 */
export class CreateServerMemberResponse extends Message<CreateServerMemberResponse> {
  /**
   * @generated from field: proto.member.v1.Member Member = 1;
   */
  Member?: Member;

  constructor(data?: PartialMessage<CreateServerMemberResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.member.v1.CreateServerMemberResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Member", kind: "message", T: Member },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateServerMemberResponse {
    return new CreateServerMemberResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateServerMemberResponse {
    return new CreateServerMemberResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateServerMemberResponse {
    return new CreateServerMemberResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateServerMemberResponse | PlainMessage<CreateServerMemberResponse> | undefined, b: CreateServerMemberResponse | PlainMessage<CreateServerMemberResponse> | undefined): boolean {
    return proto3.util.equals(CreateServerMemberResponse, a, b);
  }
}

